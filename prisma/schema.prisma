// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  image        String?
  password     String
  refreshToken String?  @unique
  role         Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
  address      Address?
  order        Order[]
}

model Address {
  id          Int      @id @default(autoincrement())
  houseNumber String
  village     String?
  road        String
  district    String
  province    String
  postalCode  String
  userId      Int      @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Product {
  id         Int         @id @default(autoincrement())
  name       String
  slug       String      @unique
  desc       String
  price      Float
  image      String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now())
  categories Category[]
  orderItems OrderItem[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  slug      String    @unique
  desc      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  products  Product[]
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  items     OrderItem[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  price     Float
  orderId   Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}
